// lms.cal -- part of 'DigitalFiltering' project
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Monolithic implementation of adaptive LMS filter.
//
// Changelog:
// - initial version 19/09/2013
// - simplification 24/04/2014 (jboutell)

package filters.common;

import filters.common.constants.*;

actor lms() 
int(size=SAMPLE_SZ) operand_1,
int(size=SAMPLE_SZ) operand_2
==>
int(size=SAMPLE_SZ) result :

	int MU = 8;	// convergence factor
	int N = 7; // filter tap count
	
	List(type: int, size = N) x;
	List(type: int, size = N) w;

	initialize ==>
	do
		foreach int i in 0 .. N-1
		do
	        x[i] := 0;
	        w[i] := 0;
		end
	end

	action operand_1:[ xk ], operand_2:[ yk ] ==> result:[ ek ]
	var
		int ek,
		int nk
	do
		foreach int i in 0 .. N-2
		do
			x[i] := x[i+1];	
		end
		x[N-1] := xk;

		nk := 0;
		foreach int i in 0 .. N-1
		do
			nk := nk + w[i] * x[i];
		end
		ek := yk - (nk >> 24);
					
		foreach int i in 0 .. N-1
		do
			w[i] := w[i] + (MU * ek * x[i]);
		end
	end

end
