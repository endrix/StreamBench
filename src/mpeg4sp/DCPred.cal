/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2006, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/
// DCPred.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

package mpeg4sp;

import mpeg4sp.Constants.*;

actor DCPred ()
	int(size=BTYPE_SZ) BTYPE,
	int(size=MB_COORD_SZ + 3) A,
	int(size=MB_COORD_SZ + 3) B,
	int(size=MB_COORD_SZ + 3) C,
	int(size=SAMPLE_SZ) IN,
	int(size=QUANT_SZ) QP
		==>
	int(size=SAMPLE_SZ) OUT,
	int(size=MB_COORD_SZ + 3) PTR,
	int(size=3) START,
	bool SIGNED,
	int(size=QUANT_SZ) QUANT :

	int(size=QUANT_SZ) s_QP;

	int(size=2) round = 0;

	// Use 3 address lines for component index to save address calculation effort
	// Also, location 0 is reserved for all uncoded blocks. This protocol must
	// be identical to the buffer addressing in Reconstruct.cal, since pointer
	// values are passed on ports A, B, C.
	int BUF_SIZE = (MAXW_IN_MB + 2) * 8;

	int ptr := 8;

	// Start at 8, since 0-7 are reserved
	// Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
	int(size=SAMPLE_SZ) dc_buf[BUF_SIZE] := [ DCVAL : for int k in 1 .. BUF_SIZE ];

	int(size=4) comp := 0;

	// -ve means there is no data, so the inverse zigzag may flush its buffer
	start: action BTYPE:[ cmd ] ==> START:[ -2 ]
	guard
		(cmd & NEWVOP) != 0
	do
		comp := 0;
		ptr := 8;
	end

	skip: action BTYPE:[ x ] ==>
	end

	read.inter_ac: action BTYPE:[ cmd ], QP:[ qp ] ==>
		START:[ 0 ], PTR:[ 0 ], SIGNED:[ true ], QUANT:[ s_QP ]
	guard
		(cmd & INTER) != 0,
		(cmd & ACCODED) != 0
	do
		is_signed := true;
		s_QP := qp;
	end

	// Any other block except INTRA
	read.other: action BTYPE:[ cmd ], QP:[ qp ] ==> START:[ -1 ]
	guard
		(cmd & INTRA) = 0
	do
		s_QP := qp;
	end

	function abs(int x) --> int :
		if x < 0 then
			(-x)
		else
			x
		end
	end

	// Calculate DC scaler for INTRA blocks
	function dc_scaler() --> int(size=SCALER_SZ) :
		if (comp & 4) = 0 then
		// Y component
			if s_QP > 0 and s_QP < 5 then
				8
			else
				if s_QP > 4 and s_QP < 9 then
					2 * s_QP
				else
					if s_QP > 8 and s_QP < 25 then
						s_QP + 8
					else
						(2 * s_QP) - 16
					end
				end
			end
		else
		// UV component
			if s_QP > 0 and s_QP < 5 then
				8
			else
				if s_QP > 4 and s_QP < 25 then
					(s_QP + 13) >> 1
				else
					s_QP - 6
				end
			end
		end
	end

	int(size=SAMPLE_SZ) dc_pred;

	int(size=SCALER_SZ) scaler;

	bool is_signed;

	read.intra: action BTYPE:[ cmd ], A:[ a ], B:[ b ], C:[ c ], QP:[ qp ] ==>
		PTR:[ if top then c else a end ],
		START:[ s ], SIGNED:[ is_signed ], QUANT:[ s_QP ]
	var
		int(size=SAMPLE_SZ) dca = dc_buf[a],
		int(size=SAMPLE_SZ) dcb = dc_buf[b],
		int(size=SAMPLE_SZ) dcc = dc_buf[c],
		int(size=SAMPLE_SZ) horiz = abs(dcb - dcc),
		int(size=SAMPLE_SZ) vert = abs(dca - dcb),
		bool top = vert < horiz,
		int(size=3) s,
		bool ac = (cmd & ACPRED) != 0
	do
		s_QP := qp;
		scaler := dc_scaler();
		dc_pred := ((if top then
			dcc
		else
			dca
		end) + (scaler >> 1)) / scaler;
		s := if not ac then
			0
		else
			if top then
				2
			else
				1
			end
		end;
		is_signed := scaler = 0;
	end

	int(size=SAMPLE_SZ) dc_val;

	// Do dequant on INTER block DC
	getdc.inter: action IN:[ dc ] ==>
	var
		int(size=SAMPLE_SZ) v = (s_QP * ((abs(dc) << 1) + 1)) - round
	do
		dc_val := if dc = 0 then
			0
		else
			if not is_signed then
				dc
			else
				if dc < 0 then
					-v
				else
					v
				end
			end
		end;
	end

	// Do prediction on INTRA block DC
	getdc.intra: action IN:[ dc ] ==>
	do
		dc_val := (dc + dc_pred) * scaler;
	end

	function saturate(int x) --> int
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :

		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end

	sat: action ==> OUT:[ dc ]
	var
		int(size=SAMPLE_SZ) dc = saturate(dc_val)
	do
		dc_buf[(ptr | comp)] := dc;
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			ptr := if ptr = 8 then
				BUF_SIZE - 8
			else
				ptr - 8
			end;
		end
	end

	schedule fsm read :
		read ( start ) --> getw;
		read ( read.inter_ac ) --> inter;
		read ( read.intra ) --> intra;
		read ( read.other ) --> advance;
		getw ( skip ) --> geth;
		geth ( skip ) --> read;
		intra ( getdc.intra ) --> sat;
		inter ( getdc.inter ) --> sat;
		sat ( sat ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.inter_ac > read.other > read.intra;
	end

end