/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/
// Sequence.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

package mpeg4sp;

import mpeg4sp.Constants.*;

actor Sequence ()
	int(size=BTYPE_SZ) BTYPE
	==>
	int(size=MB_COORD_SZ + 3) A, int(size=MB_COORD_SZ + 3) B, int(size=MB_COORD_SZ + 3) C :

	// Generate indices into the stream history to locate
	//   A  neighbor to the left
	//   B  neighbor above left
	//   C  neighbor above
	//         comp layout
	//      Y         U       V
	//  +---+---+   +---+   +---+
	//  | 0 | 1 |   | 4 |   | 5 |
	//  +---+---+   +---+   +---+
	//  | 2 | 3 | 
	//  +---+---+
	int(size=MB_COORD_SZ) mbx := 0;

	// Current macroblock x position
	bool top_edge := true;

	// Top edge macroblock flag
	bool left_edge;

	int(size=4) comp := 0;

	int(size=MB_COORD_SZ) mbwidth := 0;

	// Macroblock width of current vop
	// Use 3 address lines for component index to save address calculation effort
	// Also, location 0 is reserved for all uncoded blocks. This protocol must
	// be identical to the buffer addressing in Reconstruct.cal, since pointer
	// values are passed on ports A, B, C.
	int BUF_SIZE = (MAXW_IN_MB + 2);

	bool coded[BUF_SIZE * 8];

	int(size=MB_COORD_SZ) ptr;

	int(size=MB_COORD_SZ) ptr_left;

	int(size=MB_COORD_SZ) ptr_above;

	int(size=MB_COORD_SZ) ptr_above_left;

	// buffer pointer wrap, skipping over address 0
	function decrement(int(size=MB_COORD_SZ) p) --> int(size=MB_COORD_SZ) :
		if p = 1 then
			BUF_SIZE - 1
		else
			p - 1
		end
	end

	function access(int(size=MB_COORD_SZ) p, int(size=4) c) --> int(size=MB_COORD_SZ + 3) :
		(p << 3) | c
	end

	// New VOP
	start: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	do
		mbx := 0;
		top_edge := true;
		left_edge := true;
		comp := 0;
	end

	getw: action BTYPE:[ w ] ==>
	do
		mbwidth := w;
		ptr := 1;
		ptr_left := 2;
		ptr_above := 1 + w;
		ptr_above_left := 2 + w;
	end

	geth: action BTYPE:[ h ] ==>
	end

	read.intra: action BTYPE:[ btype ] ==>
	guard
		(btype & INTRA) != 0
	do
		coded[access(ptr, comp)] := true;
	end

	read.other: action BTYPE:[ btype ] ==>
	do
		coded[access(ptr, comp)] := false;
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			mbx := mbx + 1;
			left_edge := false;
			if mbx = mbwidth then
				mbx := 0;
				top_edge := false;
				left_edge := true;
			end
			ptr := decrement(ptr);
			ptr_left := decrement(ptr_left);
			ptr_above := decrement(ptr_above);
			ptr_above_left := decrement(ptr_above_left);
		end
	end

	// Locate prediction indices for block 0
	predict.b0: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 0
	var
		int(size=MB_COORD_SZ + 3) a := 0,
		int(size=MB_COORD_SZ + 3) b := 0,
		int(size=MB_COORD_SZ + 3) c	:= 0
	do
		if not left_edge then
		// left-neighbor is block 1 from previous macroblock
			a := access(ptr_left, 1);
			if not coded[a] then
				a := 0;
			end
			if not top_edge then
			// above-left-neighbor is block 3 from previous row, col macroblock
				b := access(ptr_above_left, 3);
				if not coded[b] then
					b := 0;
				end
			end
		end
		// above-neighbor is block 2 from previous row macroblock
		if not top_edge then
			c := access(ptr_above, 2);
			if not coded[c] then
				c := 0;
			end
		end
	end

	// Locate prediction indices for block 1
	predict.b1: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 1
	var
		int(size=MB_COORD_SZ + 3) a := access(ptr, 0), // left-neighbor is block 0 from this macroblock
		int(size=MB_COORD_SZ + 3) b := 0,
		int(size=MB_COORD_SZ + 3) c := 0
	do
		if not coded[a] then
			a := 0;
		end
		if not top_edge then
		// above-left-neighbor is block 2 from previous row macroblock
			b := access(ptr_above, 2);
			if not coded[b] then
				b := 0;
			end
			// above-neighbor is block 3 from previous row macroblock
			c := access(ptr_above, 3);
			if not coded[c] then
				c := 0;
			end
		end
	end

	// Locate prediction indices for block 2
	predict.b2: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 2
	var
		int(size=MB_COORD_SZ + 3) a := 0,
		int(size=MB_COORD_SZ + 3) b := 0,
		int(size=MB_COORD_SZ + 3) c := access(ptr, 0) // above-neighbor is block 0 from this macroblock
	do
		if not left_edge then
		// left-neighbor is block 3 from previous macroblock
			a := access(ptr_left, 3);
			if not coded[a] then
				a := 0;
			end
			// above-left-neighbor is block 1 from previous macroblock
			b := access(ptr_left, 1);
			if not coded[b] then
				b := 0;
			end
		end
		if not coded[c] then
			c := 0;
		end
	end

	// Locate prediction indices for block 3
	predict.b3: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 3
	var
		int(size=MB_COORD_SZ + 3) a := access(ptr, 2), // left-neighbor is block 2 from this macroblock
		int(size=MB_COORD_SZ + 3) b := access(ptr, 0), // above-left-neighbor is block 0 from this macroblock
		int(size=MB_COORD_SZ + 3) c := access(ptr, 1) // above-neighbor is block 1 from this macroblock
	do
		if not coded[a] then
			a := 0;
		end
		if not coded[b] then
			b := 0;
		end
		if not coded[c] then
			c := 0;
		end
	end

	// Locate prediction indices for blocks 4, 5
	predict.b45: action ==> A:[ a ], B:[ b ], C:[ c ]
	var
		int(size=MB_COORD_SZ + 3) a := 0,
		int(size=MB_COORD_SZ + 3) b := 0,
		int(size=MB_COORD_SZ + 3) c := 0
	do
		if not left_edge then
		// left-neighbor is from previous macroblock
			// Note: just set curr and requested comp to 0 since they offset
			a := access(ptr_left, comp);
			if not coded[a] then
				a := 0;
			end
			if not top_edge then
			// above-left-neighbor is from previous row, col macroblock
				// Note: just set curr and requested comp to 0 since they offset
				b := access(ptr_above_left, comp);
				if not coded[b] then
					b := 0;
				end
			end
		end
		// above-neighbor is from previous row macroblock
		// Note: just set curr and requested comp to 0 since they offset
		if not top_edge then
			c := access(ptr_above, comp);
			if not coded[c] then
				c := 0;
			end
		end
	end

	schedule fsm read :
		read ( start ) --> getw;
		getw ( getw ) --> geth;
		geth ( geth ) --> read;
		read ( read.intra ) --> predict;
		read ( read.other ) --> advance;
		predict ( predict ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.intra > read.other;
		predict.b0 > predict.b45;
		predict.b1 > predict.b45;
		predict.b2 > predict.b45;
		predict.b3 > predict.b45;
	end

end