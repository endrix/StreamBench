/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/
// SearchWindow.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

package mpeg4sp;

import mpeg4sp.Constants.*;

actor SearchWindow ()
	int(size=MV_SZ) MV, int(size=BTYPE_SZ) BTYPE, uint(size=32) DI
		==>
	uint(size=32) DO, int(size=FLAG_SZ) FLAGS :

	int ROUND_TYPE = 32;

	// Search window organization - separate LUMA, CHROMA buffers
	//   LUMA     <-- Y (6 bits) --><-- X (4 bits) -->
	//   CHROMA   <-- COMP (1 bit) --><-- Y (5 bits) --><-- X (3 bits) -->
	// The 4 luma blocks are stored pixel-wise in one buffer, the U and V components are stored in a second
	// buffer with each plane individually addressable. Since the data are stored in 32-bit words, the X
	// address is the pixel-X divided by 4. The upper byte is the left-most pixel in this word. The X 
	// macroblock address is computed by adding a pointer offset which is incremented once per macroblock
	// to implement a ring-buffer.
	// Retreival is always 3 words (12 pixels) which bracket the actual 9 values needed. A down-stream actor
	// will sort out the actual pixels required. This is necessary to maintain HD throughput.
	// Filling search window = 3 x 6 x 64 / 4   ->  288 clocks per macroblock
	// Reading compensation  = 6 x 3 x 9        ->  162 clocks per macroblock
	// Required rate is 6 * 64 * 120MHz/93.3MHz -> max. 493 clocks per macroblock
	function maskBits(int v, int n) --> int :
		v & ((1 << n) - 1)
	end

	int LUMA_X_BITS = 4;

	int LUMA_Y_BITS = 6;

	int CHROMA_X_BITS = 3;

	int CHROMA_Y_BITS = 5;

	//  list( type:list(type:int(size=32), size=LUMA_X_SIZE), size=LUMA_Y_SIZE )
	//           luma := initList( initList(0,LUMA_X_SIZE), LUMA_Y_SIZE );   // 2 BRAMs
	uint(size=32) luma[16 * 64];

	// 2 BRAMs
	//  list( type:list( type:list(type:int(size=32), size=CHROMA_X_SIZE), size=CHROMA_Y_SIZE ), size=2 )
	//           chroma := initList( initList( initList(0,CHROMA_X_SIZE), CHROMA_Y_SIZE), 2);    // 1 BRAM
	uint(size=32) chroma[8 * 32 * 2];

	// 1 BRAM
	bool prediction_is_INTRA;

	bool is_motion;

	bool round;

	int(size=8) count;

	int(size=4) comp;

	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	do
		round := (cmd & ROUND_TYPE) != 0;
		prediction_is_INTRA := (cmd & INTRA) != 0;
		comp := 0;
		is_motion := false;
		// ensure that we do not attempt to read MVs when filling 1st search stripe
		mbx := -1;
		// prefill one macroblock
		mby := 0;
		y_offset := -1;
		count := 0;
	end

	int(size=MB_COORD_SZ) mbw_max;

	int(size=MB_COORD_SZ) mbh_max;

	int(size=MB_COORD_SZ) mbx;

	int(size=MB_COORD_SZ) mby;

	int(size=LUMA_X_BITS) mbx_ptr := 0;

	int(size=3) y_offset;

	getw: action BTYPE:[ w ] ==>
	do
		mbw_max := w - 1;
	end

	geth: action BTYPE:[ h ] ==>
	do
		mbh_max := h - 1;
	end

	cmd.motion: action BTYPE:[ cmd ] ==>
	guard
		(cmd & (INTER | MOTION)) = (INTER | MOTION)
	do
		is_motion := true;
	end

	cmd.noMotion: action BTYPE:[ cmd ] ==> FLAGS:[ 0 ]
	guard
		(cmd & INTER) = INTER
	do
		mvx := 0;
		mvy := 0;
		is_motion := true;
	end

	cmd.other: action BTYPE:[ cmd ] ==>
	do
		is_motion := false;
	end

	bypass: action ==>
	guard
		prediction_is_INTRA or comp != 0 or (mbx = mbw_max and mby = mbh_max)
	do
		if comp = 0 then
			// When bypassing the last MB in frame, increment so that offset calculations are correct
			mbx_ptr := (mbx_ptr + 1) & 7;
		end
	end

	next: action ==>
	do
		if mbx < 0 then
			mbx := 0;
		else
			if comp = 5 then
				comp := 0;
				if mbx = mbw_max then
					mbx := 0;
					mby := mby + 1;
				else
					mbx := mbx + 1;
				end
			else
				comp := comp + 1;
			end
		end
	end

	done: action ==>
	guard
		y_offset = 2
	do
		mbx_ptr := (mbx_ptr + 1) & 7;
		y_offset := -1;
		count := 0;
	end

	// Note: a stripe of 3 MBs is prefetched into the search window, so
	// the current position in the prev image is always at delta mbx = -1
	read.luma: action DI:[ d ] ==>
	guard
		count <= 63
	var
		int(size=3) comp_local = maskBits((count >> 4), 2),
		int(size=LUMA_Y_BITS + 1) y =
			maskBits(maskBits((count >> 1), 3) +
			if (comp_local & 2) != 0 then 8 else 0 end + (y_offset << 4), LUMA_Y_BITS),
		int(size=LUMA_X_BITS + 1) x =
			maskBits(maskBits(count, 1) +
			if (comp_local & 1) != 0 then 2 else 0 end + (mbx_ptr << 2), LUMA_X_BITS)	
	do

		luma[(y << LUMA_X_BITS) + x] := d;
		count := count + 1;
	end

	read.chroma: action DI:[ d ] ==>
	var
		int(size=2) comp_local = maskBits((count >> 4), 1),
		int(size=CHROMA_Y_BITS + 1) y = maskBits(maskBits((count >> 1), 3) + (y_offset << 3), CHROMA_Y_BITS),
		int(size=CHROMA_X_BITS + 1) x = maskBits(maskBits(count, 1) + (mbx_ptr << 1), CHROMA_X_BITS)
	do

		chroma[(comp_local << (CHROMA_X_BITS + CHROMA_Y_BITS)) + (y << CHROMA_X_BITS) + x] := d;
		count := count + 1;
		if count = 96 then
			count := 0;
			y_offset := y_offset + 1;
		end
	end

	int(size=MV_SZ) mvx;
	int(size=MV_SZ) mvy;

	// Encode flags on halfpel: bit2 = interp. x
	//                          bit1 = interp. y
	//                          bit0 = round
	bool interp_x;

	getmvx: action MV:[ v ] ==>
	do
		interp_x := (v & 1) != 0;
		mvx := (v >> 1);
	end

	getmvy: action MV:[ v ] ==> FLAGS:[ f ]
	var
		int(size=FLAG_SZ) f = if interp_x then 4 else 0 end +
			if (v & 1) != 0 then 2 else 0 end +
			if round then 1 else 0 end
	do
		mvy := (v >> 1);
	end

	int(size=3) mvxcount;

	int(size=5) mvycount;

	motion: action ==>
	guard
		is_motion
	do
		mvxcount := 0;
		mvycount := 0;
	end

	noMotion: action ==>
	end

	search_done: action ==>
	guard
		mvycount = 9
	end

	search.luma: action ==>
		DO:[ luma[(maskBits(y, LUMA_Y_BITS) << LUMA_X_BITS) +
				maskBits((x + ((mbx_ptr - 2) << 4)) >> 2, LUMA_X_BITS)] ]
	guard
		comp <= 3
	var
		int(size=MV_SZ + 1) y := mvy + mvycount + if (comp & 2) != 0 then 8 else 0 end,
		int(size=MV_SZ + 1) x := mvx + (mvxcount << 2) + if (comp & 1) != 0 then 8 else 0 end
	do
		// Clip to frame
		if mby = 0 then
			y := if y < 0 then 0 else y end;
		else
			if mby = mbh_max then
				y := if y > 15 then 15 else y end;
			end
		end
	
		if mbx = 0 then
			x := if x < 0 then 0 else x end;
		else
			if mbx = mbw_max then
				x := if x > 12 then 12 else x end;
			end
		end

		mvxcount := mvxcount + 1;
		if mvxcount = 3 then
			mvxcount := 0;
			mvycount := mvycount + 1;
		end
	end

	search.chroma: action ==>
		DO:[ chroma[(maskBits(comp, 1) << (CHROMA_X_BITS + CHROMA_Y_BITS)) +
					(maskBits(y, CHROMA_Y_BITS) << CHROMA_X_BITS) +
					maskBits((x + ((mbx_ptr - 2) << 3)) >> 2, CHROMA_X_BITS)] ]
	var
		int(size=MV_SZ + 1) y := mvy + mvycount,
		int(size=MV_SZ + 1) x := mvx + (mvxcount << 2)
	do
		// Clip to frame
		if mby = 0 then
			y := if y < 0 then 0 else y end;
		else
			if mby = mbh_max then
				y := if y > 7 then 7 else y end;
			end
		end

		if mbx = 0 then
			x := if x < 0 then 0 else x end;
		else
			if mbx = mbw_max then
				x := if x > 4 then 4 else x end;
			end
		end

		mvxcount := mvxcount + 1;
		if mvxcount = 3 then
			mvxcount := 0;
			mvycount := mvycount + 1;
		end
	end

	schedule fsm cmd :
		cmd ( cmd.newVop ) --> getw;
		cmd ( cmd.noMotion ) --> fill;
		cmd ( cmd.motion ) --> getmvx;
		cmd ( cmd.other ) --> fill;

		getw ( getw ) --> geth;
		geth ( geth ) --> fill;

		getmvx ( getmvx ) --> getmvy;
		getmvy ( getmvy ) --> fill;

		// Fill in 3 new macroblocks
		fill ( bypass ) --> motion;
		fill ( done ) --> motion;
		fill ( read ) --> fill;

		motion ( noMotion ) --> next;
		motion ( motion ) --> search;

		search ( search_done ) --> next;
		search ( search ) --> search;

		next ( next ) --> cmd;
	end

	priority
		cmd.newVop > cmd.motion > cmd.noMotion > cmd.other;
		bypass > done > read;
		read.luma > read.chroma;
		search_done > search;
		search.luma > search.chroma;
		motion > noMotion;
	end

end