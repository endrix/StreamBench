/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-5.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
* (2) to develop the ISO/IEC 23002-5: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-5 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-5.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-5 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-5
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/

/********************************************
*  Algo_Interp_HalfpelBilinearRoundingControl
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
*
* Interpolation for motion compensation
*********************************/
package mpeg4sp;

import mpeg4sp.Constants.*;

actor Algo_Interp_HalfpelBilinearRoundingControl () 
	int(size=PIX_SZ) RD, 
	int(size=FLAG_SZ) halfpel 
		==>
		int(size=PIX_SZ) MOT :

	// Compensation function
	function compensate(int p00, int p10, int p01, int p11) --> int :
		if flags = 0 then
			p00
		else
			if flags = 1 then
			// interpolate y only
				((p00 + p01 + 1) - round) >> 1
			else
				if flags = 2 then
				// interpolate x only
					((p00 + p10 + 1) - round) >> 1
				else
				// interpolate x and y
					((p00 + p10 + p01 + p11 + 2) - round) >> 2
				end
			end
		end
	end

	int(size=5) x;

	int(size=5) y;

	int(size=3) flags;

	int(size=2) round;

	start: action halfpel:[ f ] ==>
	do
		x := 0;
		y := 0;
		flags := (f >> 1);
		round := (f & 1);
	end

	done: action ==>
	guard
		y = 9
	end

	int(size=PIX_SZ) d0;

	int(size=PIX_SZ) d1;

	int(size=PIX_SZ) d2;

	int(size=PIX_SZ) d3;

	int(size=PIX_SZ) d4;

	int(size=PIX_SZ) d5;

	int(size=PIX_SZ) d6;

	int(size=PIX_SZ) d7;

	int(size=PIX_SZ) d8;

	int(size=PIX_SZ) d9;

	row_col_0: action RD:[ d ] ==>
	guard
		(x = 0) or (y = 0)
	do
		d9 := d8;
		d8 := d7;
		d7 := d6;
		d6 := d5;
		d5 := d4;
		d4 := d3;
		d3 := d2;
		d2 := d1;
		d1 := d0;
		d0 := d;
		x := x + 1;
		if x >= 9 then
			x := 0;
			y := y + 1;
		end
	end

	other: action RD:[ d ] ==> MOT:[ p ]
	guard
		(x != 0),
		(y != 0),
		y != 9
	var
		int p = compensate(d9, d8, d0, d)
	do
		d9 := d8;
		d8 := d7;
		d7 := d6;
		d6 := d5;
		d5 := d4;
		d4 := d3;
		d3 := d2;
		d2 := d1;
		d1 := d0;
		d0 := d;
		x := x + 1;
		if x >= 9 then
			x := 0;
			y := y + 1;
		end
	end

	schedule fsm start :
		start ( start ) --> interpolate;
		interpolate ( done ) --> start;
		interpolate ( row_col_0 ) --> interpolate;
		interpolate ( other ) --> interpolate;
	end

	priority
		done > row_col_0 > other;
	end

end