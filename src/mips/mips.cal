/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package mips;

import mips.Constants.*;

actor mips()
		==>
			int result:
			
  uint(size=32)	imem[44] = [
		  0x8fa40000,			// [0x00400000]  lw $4, 0($29)                   ; 175: lw $a0 0($sp)               # argc
		  0x27a50004,			// [0x00400004]  addiu $5, $29, 4                ; 176: addiu $a1 $sp 4             # argv
		  0x24a60004,			// [0x00400008]  addiu $6, $5, 4                 ; 177: addiu $a2 $a1 4             # envp
		  0x00041080,			// [0x0040000c]  sll $2, $4, 2                   ; 178: sll $v0 $a0 2
		  0x00c23021,			// [0x00400010]  addu $6, $6, $2                 ; 179: addu $a2 $a2 $v0
		  0x0c100016,			// [0x00400014]  jal 0x00400058 [main]           ; 180: jal main
		  0x00000000,			// [0x00400018]  nop                             ; 181: nop
		  0x3402000a,			// [0x0040001c]  ori $2, $0, 10                  ; 183: li $v0 10
		  0x0000000c,			// [0x00400020]  syscall                         ; 184: syscall                     # syscall 10 (exit)
		  0x3c011001,			// [0x00400024]  lui $1, 4097 [A]                ; 4: la   $t0,A           ; C&S
		  0x34280000,			// [0x00400028]  ori $8, $1, 0 [A]
		  0x00044880,			// [0x0040002c]  sll $9, $4, 2                   ; 5: sll  $t1,$a0,2
		  0x01094821,			// [0x00400030]  addu $9, $8, $9                 ; 6: addu $t1,$t0,$t1
		  0x8d2a0000,			// [0x00400034]  lw $10, 0($9)                   ; 7: lw   $t2,($t1)
		  0x00055880,			// [0x00400038]  sll $11, $5, 2                  ; 8: sll  $t3,$a1,2
		  0x010b5821,			// [0x0040003c]  addu $11, $8, $11               ; 9: addu $t3,$t0,$t3
		  0x8d6c0000,			// [0x00400040]  lw $12, 0($11)                  ; 10: lw   $t4,($t3)
		  0x018a682a,			// [0x00400044]  slt $13, $12, $10               ; 11: slt  $t5,$t4,$t2
		  0x11a00003,			// [0x00400048]  beq $13, $0, 12 [L1-0x00400048] ; 12: beq  $t5,$zero,L1
		  0xad2c0000,			// [0x0040004c]  sw $12, 0($9)                   ; 13: sw   $t4,($t1)
		  0xad6a0000,			// [0x00400050]  sw $10, 0($11)                  ; 14: sw   $t2,($t3)
		  0x03e00008,			// [0x00400054]  jr $31                          ; 15: jr   $ra            ; L1
		  0x27bdfff4,			// [0x00400058]  addiu $29, $29, -12             ; 17: addiu $sp,$sp,-12   ; main
		  0xafbf0008,			// [0x0040005c]  sw $31, 8($29)                  ; 18: sw   $ra,8($sp)
		  0xafb10004,			// [0x00400060]  sw $17, 4($29)                  ; 19: sw   $s1,4($sp)
		  0xafb00000,			// [0x00400064]  sw $16, 0($29)                  ; 20: sw   $s0,0($sp)
		  0x24100000,			// [0x00400068]  addiu $16, $0, 0                ; 21: addiu $s0,$zero,0
		  0x2a080008,			// [0x0040006c]  slti $8, $16, 8                 ; 22: slti $t0,$s0,8      ; L5
		  0x1100000b,			// [0x00400070]  beq $8, $0, 44 [L2-0x00400070]  ; 23: beq  $t0,$zero,L2
		  0x26110001,			// [0x00400074]  addiu $17, $16, 1               ; 24: addiu $s1,$s0,1
		  0x2a280008,			// [0x00400078]  slti $8, $17, 8                 ; 25: slti $t0,$s1,8      ; L4
		  0x11000006,			// [0x0040007c]  beq $8, $0, 24 [L3-0x0040007c]  ; 26: beq  $t0,$zero,L3
		  0x26040000,			// [0x00400080]  addiu $4, $16, 0                ; 27: addiu $a0,$s0,0
		  0x26250000,			// [0x00400084]  addiu $5, $17, 0                ; 28: addiu $a1,$s1,0
		  0x0c100009,			// [0x00400088]  jal 0x00400024 [compare_swap]   ; 29: jal  compare_swap
		  0x26310001,			// [0x0040008c]  addiu $17, $17, 1               ; 30: addiu $s1,$s1,1
		  0x0810001e,			// [0x00400090]  j 0x00400078 [L4]               ; 31: j    L4
		  0x26100001,			// [0x00400094]  addiu $16, $16, 1               ; 32: addiu $s0,$s0,1     ; L3
		  0x0810001b,			// [0x00400098]  j 0x0040006c [L5]               ; 33: j    L5
		  0x8fbf0008,			// [0x0040009c]  lw $31, 8($29)                  ; 34: lw   $ra,8($sp)     ; L2
		  0x8fb10004,			// [0x004000a0]  lw $17, 4($29)                  ; 35: lw   $s1,4($sp)
		  0x8fb00000,			// [0x004000a4]  lw $16, 0($29)                  ; 36: lw   $s0,0($sp)
		  0x27bd000c,			// [0x004000a8]  addiu $29, $29, 12              ; 37: addiu $sp,$sp,12
		  0x03e00008			// [0x004000ac]  jr $31                          ; 38: jr   $ra
		];
			
			
			
	
	function IADDR(int x) --> int :
		(((x)&0x000000ff)>>2)
	end
	
	function DADDR(int x) --> int:
		(((x)&0x000000ff)>>2)
	end
	
    int(size=64) hilo;
    int reg[32];
    int Hi;
    int Lo;
    int pc := 0;
    int dmem[64];
    
    uint ins;
    int op;
    int rs;
    int rt;
    int rd;
    int shamt;
    int funct;
    int(size=16) address;
    int tgtadr;
    int n_inst;
    
    int A[8] = [ 22, 5, -9, 3, -17, 38, 0, 11 ];
    
    
    INIT: action ==>
    do	
    	n_inst := 0;
    	foreach int i in 0 .. 31 do
    		reg[i] := 0;
    	end
    	reg[29] := 0x7fffeffc;
    	
    	foreach int i in 0 .. 7 do
            dmem[i] := A[i];
        end
        
        pc := 0x00400000;
    end
    
    START: action ==>
    do
    	ins := imem[IADDR (pc)];
    	pc := pc + 4;
        op := ins >> 26;
    end
    
    NEXT: action ==>
    guard
    	pc != 0 and n_inst != 609
    do
    	
    	reg[0] := 0;
    	n_inst := n_inst + 1;
    	//println("NEXT :" + n_inst);
    end   
     
    STOP: action ==>
    guard
    	n_inst = 609
    end 
      
    OP.R: action ==>
    guard
    	op = R
    do
    	funct := ins & 0x3f;
        shamt := (ins >> 6) & 0x1f;
        rd := (ins >> 11) & 0x1f;
        rt := (ins >> 16) & 0x1f;
        rs := (ins >> 21) & 0x1f;
    end
    
    OP.J: action ==>
    guard
    	op = J
    do
    	tgtadr := ins & 0x3ffffff;
    	pc := tgtadr << 2;
    end
    
    OP.JAL: action ==>
    guard
    	op = JAL
    do
    	tgtadr := ins & 0x3ffffff;
    	reg[31] := pc;
   		pc := tgtadr << 2;
    end
    
    OP.DEFAULT: action ==>
    guard
    	op != R and op != J and op != JAL
   	do
    	address := ins & 0xffff;
	    rt := (ins >> 16) & 0x1f;
	    rs := (ins >> 21) & 0x1f;
    end
    
	FUNCT.ADDU:action ==>
	guard
		funct = ADDU
	do
		reg[rd] := reg[rs] + reg[rt];
	end
	
	FUNCT.SUBU:action ==>
	guard
		funct = SUBU
	do
    	reg[rd] := reg[rs] - reg[rt];
	end
	
	FUNCT.MULT:action ==>
	guard
		funct = MULT
	do
	    hilo := reg[rs] * reg[rt];
	    Lo := hilo & 0x00000000ffffffff;
	    Hi := (hilo >> 32) & 0xffffffff;
	end
	
	FUNCT.MULTU:action ==>
	guard
		funct = MULTU
	do
		hilo := reg[rs] * (reg[rt]);
        Lo := hilo & 0x00000000ffffffff;
        Hi := (hilo >> 32) & 0xffffffff;
	end
	
	FUNCT.MFHI: action ==>
	guard
		funct = MFHI
	do	
		reg[rd] := Hi;
	end
	
	FUNCT.MFLO: action ==>
	guard
		funct = MFLO
	do
		reg[rd] := Lo;		
	end
	
	FUNCT.AND: action ==>
	guard
		funct = AND
	do
		reg[rd] := reg[rs] & reg[rt];
	end
	
	FUNCT.OR: action ==>
	guard
		funct = OR
	do
		reg[rd] := reg[rs] | reg[rt];
	end
	
	FUNCT.XOR: action ==>
	guard
		funct = XOR
	do
		reg[rd] := reg[rs] ^ reg[rt];
	end
	
	FUNCT.SLL: action ==>
	guard
		funct = SLL
	do
		reg[rd] := reg[rt] << shamt;
	end
	
	FUNCT.SRL: action ==>
    guard
		funct = SRL
    do
    	reg[rd] := reg[rt] >> shamt;
    end
    
    FUNCT.SLLV: action ==>
    guard
		funct = SLLV
    do
		reg[rd] := reg[rt] << reg[rs]; 
	end
	
	FUNCT.SRLV: action ==>
	guard
		funct = SRLV
    do
    	reg[rd] := reg[rt] >> reg[rs];
	end
	
	FUNCT.SLT: action ==> 
	guard
		funct = SLT
    do
    	reg[rd] := if reg[rs] < reg[rt] then 1 else 0 end;
	end
	
	FUNCT.SLTU: action ==>
    guard
    	funct = SLTU
    do
    	reg[rd] :=  if reg[rs] < reg[rt] then 1 else 0 end;
	end
	
	FUNCT.JR: action ==>
	guard
		funct = JR
	do
    	pc := reg[rs];
    end
	
	FUNCTI.ADDIU: action ==>
	guard
		op = ADDIU
    do 
  		reg[rt] := reg[rs] + address;
	end
	
	FUNCTI.ANDI: action ==>
	guard
		op = ANDI
    do 
  		reg[rt] := reg[rs] & address;
	end
	
	FUNCTI.ORI: action ==>
	guard
		op = ORI
    do 
  		reg[rt] := reg[rs] | address;
	end
	
	FUNCTI.XORI: action ==>
	guard
		op = XORI
    do 
  		reg[rt] := reg[rs] ^ address;
	end
	
	FUNCTI.LW: action ==>
	guard
		op = LW
    do 
  		reg[rt] := dmem[DADDR (reg[rs] + address)];
	end
	
	FUNCTI.SW: action ==>
	guard
		op = SW
    do 
  		dmem[DADDR (reg[rs] + address)] := reg[rt];
	end
	
	FUNCTI.LUI: action ==>
	guard
		op = LUI
    do 
  		reg[rt] := address << 16;
	end
	
	FUNCTI.BEQ: action ==>
	guard
		op = BEQ
    do 
  		if reg[rs] = reg[rt] then
        	pc := pc - 4 + (address << 2);
        end
	end
	
	FUNCTI.BNE: action ==>
	guard
		op = BNE
    do 
  		if (reg[rs] != reg[rt]) then
        	pc := pc - 4 + (address << 2);
		end
	end
	
	FUNCTI.BGEZ: action ==>
	guard
		op = BGEZ
    do 
  		if reg[rs] >= 0 then
        	pc := pc - 4 + (address << 2);
        end
	end
	
	FUNCTI.SLTI: action ==>
	guard
		op = SLTI
    do 
  		reg[rt] := if reg[rs] < address then 1 else 0 end;
	end
	
	FUNCTI.SLTIU: action ==>
	guard
		op = SLTIU
    do 
  		reg[rt] := if reg[rs] < address then 1 else 0 end;
	end
	
	int count_data := 0;
	
	SEND.DATA : action ==> result:[out]
	var
		int out
	do
		out := dmem[count_data];
		count_data := count_data + 1;
		println("sent");
	end
	
	SEND.STOP: action ==>
	guard
		count_data = 8
	end
	
	
	schedule fsm INIT:
		INIT  (INIT) --> START;
		
		START (START) --> OP;
		
		OP (OP.J) --> NEXT;
		OP (OP.JAL) --> NEXT;
		OP (OP.R) --> FUNCT;
		OP (OP.DEFAULT) -->FUNCTI;
		
		FUNCT (FUNCT) --> NEXT;
		
		FUNCTI (FUNCTI) --> NEXT;
		
		NEXT (NEXT) --> START;
		
		NEXT(STOP) --> SEND;
		
		SEND (SEND.DATA) --> SEND;
		SEND (SEND.STOP) --> INIT;
	end
	
	priority
		SEND.STOP > SEND.DATA;
	end
	
	
end