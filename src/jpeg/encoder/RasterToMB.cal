/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package jpeg.encoder;

actor RasterToMB()
	int(size=32) SOI,
	uint(size=8) Y,
	uint(size=8) CbCr
		==>
			int(size=8) YCbCr:
	// hack waiting for list-size parametrization
	
	int maxw_in_mb = 64;
	
	int(size=6) currentYLine := 0;

	int(size=6) currentCbCrLine := 0;

	int(size=8) mbCount := 0;

	int(size=16) mbTotalCount := 0;

	int(size=3) lineType := 0;

	int(size=8) mbwidth := 0;
	int(size=8) mbheight := 0;

	int(size=10) Counter := 0;
		
	int(size=10) cb_count := 0;
	int(size=10) cr_count := 0;
		
	int(size=16) totalMB;
	
	
	// one line of MB in the worst case
	List(type: List(type: uint(size=8), size=maxw_in_mb * 16), size=16) yTab;

	List(type: List(type: uint(size=8), size=maxw_in_mb * 8), size=8) cbTab;

	List(type: List(type: uint(size=8), size=maxw_in_mb * 8), size=8) crTab;
	
	getSzW: action SOI:[soi] ==> 
	do
		mbwidth := (soi + 15) >> 4;
	end
	
	getSzH: action SOI:[soi] ==> 
	do
		mbheight := (soi + 15) >> 4;
		totalMB := mbwidth * mbheight;
	end

	done: action ==> 
	guard
		currentYLine = 16
	do
		currentYLine := 0;
		currentCbCrLine := 0;
	end
	
	storeY.start: action ==> 
	guard
		lineType = 0 or lineType = 2
	end
	
	storeY.save: action Y:[ y ] ==> 
	do
		yTab[currentYLine][mbCount * 16 + Counter] := y-128;
		Counter := Counter + 1;
	end

	storeY.finish: action ==>
	guard
		Counter = 16
	do	
		mbCount := mbCount + 1;
		if mbCount = mbwidth then
			mbCount := 0;
			currentYLine := currentYLine + 1;
			if lineType = 0 then
				lineType := 1;
			else
				lineType := 0;
			end
		end
		Counter := 0;
	end

	storeCbCr.start: action ==>
	guard
		lineType = 1
	end

	storeCbCr.save: action CbCr:[ cbcr ] ==> 
	do
		if (Counter & 1)  =  1 then
			cbTab[currentCbCrLine][mbCount * 8 + cb_count] := cbcr-128;
			cb_count := cb_count+ 1;
		else
			crTab[currentCbCrLine][mbCount * 8 + cr_count] := cbcr-128;
			cr_count := cr_count + 1;
		end
		Counter := Counter + 1;
	end
	
	storeCbCr.finish: action ==>
	guard
		Counter = 16
	do	
		mbCount := mbCount + 1;
		if mbCount = mbwidth then
			currentCbCrLine := currentCbCrLine + 1;
			mbCount := 0;
			lineType := 2;
		end
		cr_count := 0;
		cb_count := 0;
		Counter := 0;
	end

	doneSend.EOI: action ==>
	guard
		mbTotalCount = totalMB
	do
		mbTotalCount := 0;
		mbCount := 0;
		
		currentYLine := 0;
		currentCbCrLine := 0;
		lineType := 0;
	end

	doneSend.Line: action ==>
	guard
		mbCount = mbwidth
	do
		mbCount := 0;
	end

	int block_number := 0;
	
	int bn_i := 0;
	int bn_j := 0;
	
	int Counter_S := 0;
	
	send: action ==> YCbCr:[token]
	var
		int(size=8) token
	do
		if(block_number = 0) then
			token := yTab[bn_i][bn_j + 16 * mbCount];
		elsif (block_number = 1) then
			token := yTab[bn_i][(bn_j + 8) + 16 * mbCount];
		elsif (block_number = 2) then
			token := yTab[bn_i + 8][bn_j + 16 * mbCount];
		elsif (block_number = 3) then
			token := yTab[bn_i + 8][bn_j + 8 + 16 * mbCount];
		elsif (block_number = 4) then
			token := cbTab[bn_i][bn_j + (8 * mbCount)];
		else 
			token := crTab[bn_i][bn_j + (8 * mbCount)];
		end 		
		
		bn_j := bn_j + 1;
		if(bn_j = 8) then
			bn_i := bn_i + 1;
			bn_j := 0;
			if(bn_i = 8) then
				bn_i := 0;
			end
		end
		
		Counter_S := Counter_S + 1;
		
		if (Counter_S = 64) then
			block_number := 1;
		elsif (Counter_S = 128) then
			block_number := 2;
		elsif (Counter_S = 192) then
			block_number := 3;
		elsif (Counter_S = 256) then
			block_number := 4;
		elsif (Counter_S = 320) then
			block_number := 5;
		elsif (Counter_S = 384) then
			block_number := 0;
		end
	end 
	
	send_stop: action ==>
	guard
		Counter_S = 384
	do
		mbCount := mbCount + 1;
		mbTotalCount := mbTotalCount + 1;
		Counter_S := 0;
	end
	

	schedule fsm s0 :
		s0 		(getSzW )				--> s1;
		s1		(getSzH )				--> s2;
		
		s2		(storeY.start)			--> s21;
		s21		(storeY.save)			--> s21;
		s21		(storeY.finish)			--> s2;
		
		s2		(storeCbCr.start)		--> s22;
		s22		(storeCbCr.save)		--> s22;
		s22		(storeCbCr.finish)		--> s2;
		
		s2		(done)					--> s3;
		
		s3		(send)					--> s3;
		s3		(send_stop)				--> s3;
		
		s3 		(doneSend.Line)			--> s2;
		s3 		(doneSend.EOI)			--> s0;
	end

	priority
		storeY.finish > storeY.save;
		storeCbCr.finish > storeCbCr.save;
		
		done > storeY.start;
		done > storeCbCr.start;
		
		send_stop > send;
		doneSend.EOI > doneSend.Line > send;
	end
end