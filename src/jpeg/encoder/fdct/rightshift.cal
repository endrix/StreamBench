/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package jpeg.encoder.fdct;

actor rightshift () 
	int(size=32) In 
		==> 
			int(size=32) Out:


	int Counter := 0;
	
	List(type: int(size=13), size=64) scale = 
	[ 
		1024, 1138, 1730, 1609, 
		1024, 1609, 1730, 1138, 
		1138, 1264, 1922, 1788, 
		1138, 1788, 1922, 1264, 
		1730, 1922, 2923, 2718, 
		1730, 2718, 2923, 1922, 
		1609, 1788, 2718, 2528, 
		1609, 2528, 2718, 1788, 
		1024, 1138, 1730, 1609, 
		1024, 1609, 1730, 1138,
		1609, 1788, 2718, 2528, 
		1609, 2528, 2718, 1788, 
		1730, 1922, 2923, 2718, 
		1730, 2718, 2923, 1922, 
		1138, 1264, 1922, 1788, 
		1138, 1788, 1922, 1264 
	];
	
	send: action In:[val] ==>  Out:[token]
	var
		int(size=13) token
	do
		token := (val * scale[Counter] + 0x7FFFF - (val >> 31)) >> 20;
		Counter := Counter + 1;
		if (Counter >= 64) then
			Counter := 0;
		end
	end
	

end