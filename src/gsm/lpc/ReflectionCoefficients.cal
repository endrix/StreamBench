/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package gsm.lpc;

import gsm.Constants.*;

/*
 * 4.2.5
 * Calculate Reflection coefficients 
 */
actor ReflectionCoefficients()
	int(size=LONGWORD) L_ACF
		==>
			int(size=WORD) LARc:

	
	int(size=WORD) ACF[9];
	int(size=WORD) P[9];
	int(size=WORD) K[9];
	
	action L_ACF:[lacf] repeat 9 ==> LARc:[larc] repeat 8
	var
		int(size=WORD) larc[8],
		int(size=LONGWORD) temp,
		int n,
		int r,
		int d[1],
		bool step_out := false
	do
		if lacf[0] = 0 then
			larc := [0:for int i in 0 .. 7];
		else
			temp := GSM_NORM(lacf[0]);
			foreach int i in 0 .. 8 do
				ACF[i] := SASR(lacf[i] << temp, 16);
			end
		
			/* Initialize array P[..] and K[..] for the recursion. */
			foreach int i in 1 .. 7 do
				K[i] := ACF[i];
			end
			foreach int i in 0 .. 8 do
				P[i] := ACF[i];
			end
			
				/*   Compute reflection coefficients */
			n := 1;
			r := 0;
			while (n <= 8) and not step_out do
				temp := P[1];
				temp := GSM_ABS(temp);
				
				if P[0] < temp then
					larc := [0:for int i in 0 .. 7];
					step_out := true;
				end
				
				if not step_out then
					GSM_DIV(temp, P[0],d);
					larc[r] := d[0];
					if P[1] > 0 then
						larc[r] := -larc[r];
					end
					
					if n = 8 then
						step_out := true;
					end
					
					/*  Schur recursion */
					temp := GSM_MULT_R(P[1], larc[r]);
					P[0] := GSM_ADD(P[0], temp);
					
					foreach int m in 1 .. (8 - n) do
						temp := GSM_MULT_R(K[m], larc[r]);
						P[m] := GSM_ADD(P[m + 1], temp);

						temp := GSM_MULT_R(P[m + 1], larc[r]);
						K[m] := GSM_ADD(K[m], temp);
					end	
				end
				n := n + 1;
				r := r + 1;
			end
		end
		
	end
	
end