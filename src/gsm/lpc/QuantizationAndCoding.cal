/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package gsm.lpc;

import gsm.Constants.*;
  
 /* 4.2.7 
  * This procedure needs four tables; the following equations
  * give the optimum scaling for the constants:
  *  
  * A[0..7] = integer( real_A[0..7] * 1024 )
  * B[0..7] = integer( real_B[0..7] *  512 )
  * MAC[0..7] = maximum of the LARc[0..7]
  * MIC[0..7] = minimum of the LARc[0..7]
  */
//@xronos_pipeline(gd="110")  
actor QuantizationAndCoding()
	int(size=WORD) LARC_IN
		==>
			int(size=WORD) LARC_OUT:

	int Counter := 0;
	
	int A[8] = [20480, 20480, 20480, 20480, 13964, 15360, 8534, 9036 ];
	int B[8] = [0    , 0    , 2048 , -2560,    94, -1792, -341, -1144];
	
	int MAC[8] = [ 31,  31,  15,  15,  7,  7,  3,  3];
	int MIC[8] = [-32, -32, -16, -16, -8, -8, -4, -4];
	
	
	STEP: action LARC_IN:[in_lar] ==> LARC_OUT:[out_lar]
	var
		int(size=WORD) out_lar,
		int(size=WORD) temp
	do	
		temp := GSM_MULT( A[Counter], in_lar );
		temp := GSM_ADD( temp, B[Counter]);
		temp := GSM_ADD( temp, 256 ); 
		temp := SASR( temp, 9 );
		out_lar := if temp > MAC[Counter] then MAC[Counter] - MIC[Counter] else  if temp < MIC[Counter] then 0 else temp - MIC[Counter] end end;
		Counter := Counter + 1;
		if Counter = 8 then
			Counter := 0;
		end
	end
	

end