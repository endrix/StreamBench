/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package gsm.lpc;

import gsm.Constants.*;


/*
 *  4.2.4
 *  The goal is to compute the array L_ACF[k].  The signal s[i] must
 *  be scaled in order to avoid an overflow situation.
 */
actor Autocorrelation()
	int(size=WORD) S
		==>
			int(size=WORD) SO,
			int(size=LONGWORD) L_ACF:
	
	int(size=LONGWORD) lacf[9];
	int(size=WORD) s[160];
	
	int sl;
	
	procedure STEP(int k,int(size=WORD) s[160])
	begin
		lacf[k] := lacf[k] + s[sl] * s[sl-k];
	end
	
	procedure NEXTI()
	begin
		sl := sl + 1;
	end
	
	action S:[so] repeat 160 ==> SO:[s] repeat 160, L_ACF:[lacf] repeat 9
	var
		int(size=WORD) temp,
		int(size=WORD) smax,
		int(size=WORD) scalauto,
		int(size=LONGWORD) smax_longword,
		int n
	do
		
		s:= so;
		
		/*  Search for the maximum. */
		smax := 0;
		foreach int k in 0 .. 159 do
			temp := GSM_ABS(s[k]);
			if temp > smax then
				smax := temp;
			end
		end
		
		/*  Computation of the scaling factor.*/
		if smax = 0 then
			scalauto := 0;
		else
			smax_longword := smax << 16;
			scalauto := 4 - GSM_NORM(smax_longword);
		end

		if scalauto > 0 && scalauto <= 4 then
			n := scalauto;
			foreach int k in  0 .. 159 do
				s[k] := GSM_MULT_R(s[k], 16384 >> (n - 1));
			end
		end
		
		foreach int k in 0 .. 7 do
			lacf[k] := 0;
		end
		
		
		STEP(0,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		STEP(3,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		STEP(3,s);
		STEP(4,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		STEP(3,s);
		STEP(4,s);
		STEP(5,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		STEP(3,s);
		STEP(4,s);
		STEP(5,s);
		STEP(6,s);
		NEXTI();
		STEP(0,s);
		STEP(1,s);
		STEP(2,s);
		STEP(3,s);
		STEP(4,s);
		STEP(5,s);
		STEP(6,s);
		STEP(7,s);
		
		foreach int i in 8 .. 159 do

			NEXTI();

			STEP(0,s);
			STEP(1,s);
			STEP(2,s);
			STEP(3,s);
			STEP(4,s);
			STEP(5,s);
			STEP(6,s);
			STEP(7,s);
			STEP(8,s);
		end
		
		foreach int k in 0 .. 8 do
			lacf[k] := lacf[k] << 1;
		end
		
		/*   Rescaling of the array s[0..159] */
		if scalauto > 0 then
			foreach int k in 0 .. 159 do
				s[k] := s[k] << scalauto;
			end
		end
	end
	
end