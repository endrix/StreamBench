/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package gsm;

import gsm.Constants.*;

actor Source()
	==>
		int(size=WORD) S:
	
	int N = 160;
	
	int (size=WORD) inData[N] =[	81, 10854, 1893, -10291, 7614, 29718, 20475, -29215, -18949, -29806,
								  -32017, 1596, 15744, -3088, -17413, -22123, 6798, -13276, 3819, -16273,
								    -1573, -12523, -27103,
								  -193, -25588, 4698, -30436, 15264, -1393, 11418, 11370, 4986, 7869, -1903,
								    9123, -31726,
								  -25237, -14155, 17982, 32427, -12439, -15931, -21622, 7896, 1689, 28113,
								    3615, 22131, -5572,
								  -20110, 12387, 9177, -24544, 12480, 21546, -17842, -13645, 20277, 9987,
								    17652, -11464, -17326,
								  -10552, -27100, 207, 27612, 2517, 7167, -29734, -22441, 30039, -2368, 12813,
								    300, -25555, 9087,
								  29022, -6559, -20311, -14347, -7555, -21709, -3676, -30082, -3190, -30979,
								    8580, 27126, 3414,
								  -4603, -22303, -17143, 13788, -1096, -14617, 22071, -13552, 32646, 16689,
								    -8473, -12733, 10503,
								  20745, 6696, -26842, -31015, 3792, -19864, -20431, -30307, 32421, -13237,
								    9006, 18249, 2403,
								  -7996, -14827, -5860, 7122, 29817, -31894, 17955, 28836, -31297, 31821,
								    -27502, 12276, -5587,
								  -22105, 9192, -22549, 15675, -12265, 7212, -23749, -12856, -5857, 7521,
								    17349, 13773, -3091,
								  -17812, -9655, 26667, 7902, 2487, 3177, 29412, -20224, -2776, 24084, -7963,
								    -10438, -11938,
								  -14833, -6658, 32058, 4020, 10461, 15159];
		
	int Counter := 0;
	
	
	action ==> S:[s]
	guard
		Counter < 160
	var
		int(size=WORD) s
	do
		s := inData[Counter];
		Counter := Counter + 1;
		//if Counter = 160 then
		//	Counter := 0;
		//end
	end	
		
end		