/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package gsm;

unit Constants :
	
	int SHORT = 8;
	int WORD = 16;
	int LONGWORD = 32;

	int MIN_WORD = ((-32767)-1);
	int MAX_WORD = 32767;
	
	
	uint(size=SHORT) bitoff[256] = [
	  8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
	  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];
	

	function saturate(int(size=WORD) x) --> int(size=WORD) :
		if x < MIN_WORD then
			MIN_WORD
		else
			if x > MAX_WORD then
				MAX_WORD
			else
				x
			end
		end
	end

	function GSM_ABS(int(size=WORD) a) --> int(size=WORD) :
		if	a < 0 then
			if a = MIN_WORD then
				MAX_WORD
			else
				-a
			end
		else
			a
		end
	end

	function SASR(int(size=LONGWORD) x, int(size=LONGWORD) by) --> int(size=LONGWORD) :
		x >> by
	end
	
	function GSM_ADD(int(size=WORD) a, int(size=WORD) b) --> int(size=WORD) :
		saturate(a + b)
	end

	function GSM_MULT(int(size=WORD) a, int(size=WORD) b) --> int(size=WORD) :
		if a = MIN_WORD && b = MIN_WORD then
			MAX_WORD
		else
			SASR(a*b,15)
		end
	end
	
	function GSM_MULT_R(int(size=WORD) a, int(size=WORD) b) --> int(size=WORD) 
	var
		int prod = a * b + 16384
	:
		if a = MIN_WORD && b = MIN_WORD then
			MAX_WORD
		else
			(prod >> 15) & 0xFFFF
		end
	end
	
	/*
 	 * the number of left shifts needed to normalize the 32 bit
	 * variable L_var1 for positive values on the interval
	 *
	 * with minimum of
	 * minimum of 1073741824  (01000000000000000000000000000000) and 
	 * maximum of 2147483647  (01111111111111111111111111111111)
	 *
	 *
	 * and for negative values on the interval with
	 * minimum of -2147483648 (-10000000000000000000000000000000) and
	 * maximum of -1073741824 ( -1000000000000000000000000000000).
	 *
	 * in order to normalize the result, the following
	 * operation must be done: L_norm_var1 = L_var1 << norm( L_var1 );
	 *
	 * (That's 'ffs', only from the left, not the right..)
 	 */
	function GSM_NORM(int(size=LONGWORD) a) --> int(size=WORD) 
	var
		int not_a = ~a
	:
		if a < 0 then
			if a <= -1073741824 then
				0
			else
				if (not_a & 0xffff0000) > 1 then
					if (not_a & 0xff000000) > 1 then
						  -1 + bitoff[0xFF & (not_a >> 24)]
					else
						 7 + bitoff[0xFF & (not_a >> 16)]
					end
				else
					if (not_a & 0xff00) > 1 then
						15 + bitoff[0xFF & (not_a >> 8)] 
					else
						23 + bitoff[0xFF & not_a]
					end
				end
			end
		else
			if (a & 0xffff0000) > 1 then
				if (a & 0xff000000) > 1 then
					-1 + bitoff[0xFF & (a >> 24)]
				else
					 7 + bitoff[0xFF & (a >> 16)]
				end
			else
				if (a & 0xff00) > 1 then
					15 + bitoff[0xFF & (a >> 8)] 
				else
					23 + bitoff[0xFF & a]
				end
			end
		end
	end
	
	procedure GSM_DIV(int(size=WORD) num, int(size=WORD) denum, int(size=WORD) d[1])
	var
		int(size=LONGWORD) L_num,
  		int(size=LONGWORD) L_denum,
  		int k
	begin 
		L_num := num;
  		L_denum := denum;
  		d[0] := 0;
 		k := 15;
 		/* The parameter num sometimes becomes zero.
   		 * Although this is explicitly guarded against in 4.2.5,
         * we assume that the result should then be zero as well.
         */

		if num = 0 then
 			d[0] := 0;
 		else
			while k != 0 do
      			d[0] := d[0]<< 1;
      			L_num := L_num << 1;
				if L_num >= L_denum then
      				L_num :=L_num -L_denum;
      				d[0] := d[0] + 1;
	  			end
	  			k := k - 1;
  			end
		end
	end
		
end