

/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package adpcm.decoder;

actor TestOutput () int In ==> :

	int SIZE = 100;

	int test_result [ SIZE ] = [ 0, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, 0, -1, -2,
	-2, -2, 0, -3, 1, 0, 1, -6, -5, 5, 38, 64, 70, 64, 63, 63, 67, 68, 69, 66, 67,
	64, 67, 66, 67, 64, 65, 65, 66, 63, 66, 66, 69, 66, 65, 62, 64, 64, 67, 65,
	66, 62, 63, 61, 65, 65, 66, 60, 62, 62, 64, 59, 60, 60, 63, 61, 64, 63, 64,
	60, 61, 61, 64, 61, 60, 57, 59, 58, 60, 57, 58, 56, 59, 56, 59, 57, 60, 58,
	59, 57, 60, 59, 60, 57, 60, 59 ];

	int Counter := 0;

	action In:[ token ] ==>
	var
		int main_result := 0
	do
		if token != test_result[Counter] then 
			println("Expected: " +test_result[Counter] + ", received: " + token + " : " + Counter );
			main_result := 1; 
		else
			println("Correct value: " + token + " : " + Counter );
		end 
		println("Main result :" + main_result);
		Counter := Counter + 1;
		if Counter = 100 then
			Counter := 0;
		end
	end

end