/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

 package adpcm;
 
 unit Constants:
 
 	/* QMF filter coefficients: 
 	 * scaled by a factor of 4 compared to G722 CCITT recomendation
 	 */
	int h[24] = [ 12,   -44,   -44,  212,   48,    -624, 128,   1448,
                  -840, -3220, 3804, 15504, 15504, 3804, -3220, -840,
                  1448, 128,   -624, 48,    212,   -44,  -44,   12 ];
 
	int qq4_code4_table[16] = [    0, -20456, -12896, -8968, 
		                       -6288, -4240 ,  -2584, -1200,  
		                       20456, 12896 ,   8968,  6288,
                                4240,   2584,   1200,     0];
 
 	int qq6_code6_table[64] = [-136,   -136,   -136,   -136,  -24808, -21904, -19008, -16704, -14984, -13512,
							  -12280, -11192, -10232, -9360, -8576,  -7856,  -7192,  -6576,  -6000,  -5456,
							  -4944,  -4464,  -4008,  -3576, -3168,  -2776,  -2400,  -2032,  -1688,  -1360,
							  -1040,  -728,   24808,  21904, 19008,  16704,  14984,  13512,  12280,  11192,
							  10232,  9360,   8576,   7856,  7192,   6576,   6000,   5456,   4944,   4464,
							  4008,   3576,   3168,   2776,  2400,   2032,   1688,   1360,   1040,   728,
							  432,    136,    -432,   -136];
 
  	int wl_code_table[16] = [ -60,  3042, 1198, 538, 334, 172, 58,  -30,
                                3042, 1198, 538,  334, 172, 58,  -30, -60] ;

	int ilb_table[32] = [ 2048, 2093, 2139, 2186, 2233, 2282, 2332, 2383,
      	                      2435, 2489, 2543, 2599, 2656, 2714, 2774, 2834,
       	                     2896, 2960, 3025, 3091, 3158, 3228, 3298, 3371,
       	                     3444, 3520, 3597, 3676, 3756, 3838, 3922, 4008 ];
 
 	/* decision levels - pre-multiplied by 8, 0 to indicate end */
	int decis_levl[30] = [ 280,   576,   880,   1200,  1520,  1864,
                             2208,  2584,  2960,  3376,  3784,  4240,
                             4696,  5200,  5712,  6288,  6864,  7520,
                             8184,  8968,  9752,  10712, 11664, 12896,
                             14120, 15840, 17560, 20456, 23352, 32767 ];
                             
    /* quantization table 31 long to make quantl look-up easier,
     * last entry is for mil=30 case when wd is max
     */
	int quant26bt_pos[31] = [ 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51,
                              50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                              39, 38, 37, 36, 35, 34, 33, 32, 32 ];

	/* quantization table 31 long to make quantl look-up easier,
	 * last entry is for mil=30 case when wd is max
	 */
	int quant26bt_neg[31] = [ 63, 62, 31, 30, 29, 28, 27, 26, 25, 24, 23,
                               	 	22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12,
                                	11, 10, 9,  8,  7,  6,  5,  4,  4 ];
                             
 	int qq2_code2_table[4] = [ -7408, -1616, 7408, 1616 ];

 	int wh_code_table[4] =  [798, -214, 798, -214 ];
 	
 	
 	function abs(int n) --> int:
 		if n >= 0 then
 			n
 		else
 			-n
 		end
 	end
 	
 	
 	/* filtez - compute predictor output signal (zero section) */
	/* input: bpl1-6 and dlt1-6, output: szl */	
 	function filtez(int bpl[6], int dlt[6]) --> int 
 	var 
 		int zl[6] = [bpl[i] * dlt[i]: for int i in 0 .. 5 ]
 	:
 		(zl[0] + zl[1] + zl[2] + zl[3] + zl[4] + zl[5]) >> 14  
 	end
 	
 	
 	/* filtep - compute predictor output signal (pole section) */
	/* input rlt1-2 and al1-2, output spl */
 	function filtep(int rlt1, int al1,int rtl2, int al2) --> int:
 		((2 * rlt1) * al1 + (2 * rtl2) *al2) >> 15
 	end
 	
 	/* quantl - quantize the difference signal in the lower sub-band */
 	procedure quantl(int el, int detl, int ret[1])
 	var
 		int ril,
 		int mil,
 		int wd = abs(el),
 		int decis := 0,
 		bool br := false
 	begin
 		mil := 0;
 		while not br and (mil < 30) do
 			decis := (decis_levl[mil] * detl) >> 15;
 			if wd <= decis then	
 				br := true;
 			else
 				mil := mil + 1;
 			end
 		end
 		
 		if el >= 0 then
 			ril := quant26bt_pos[mil];
  		else
 	 	  ril := quant26bt_neg[mil];	
 		end
 		ret[0] := ril;
 	end
 	
 
 	/* logscl - update log quantizer scale factor in lower sub-band */
	/* note that nbl is passed and returned */
 	function logscl(int il, int nbl) --> int
 	var
 		int wd = (nbl * 127) >> 7,
 		int new_nbl = wd + wl_code_table[il >> 2]
 	:
 		if new_nbl < 0 then
 			0
 		else
 			if new_nbl > 18432 then
 				18432
 			else
 				new_nbl
 			end
		end
	end
	
	/* scalel: compute quantizer scale factor in lower or upper sub-band*/
	function scalel(int nbl, int shift_constant) --> int
	var
	  int wd1 = (nbl >> 6) & 31,
	  int wd2 = nbl >> 11,
	  int wd3 = ilb_table[wd1] >> (shift_constant + 1 - wd2)
	:
	  	wd3 << 3
 	end
 	
 	/* upzero - inputs: dlt, dlti[0-5], bli[0-5], outputs: updated bli[0-5] */
	/* also implements delay of bli and update of dlti from dlt */
 	procedure upzero(int dlt, int dlti[6], int bli[6]) 
 	var
 		int wd2,
 		int wd3
 	begin
 		if dlt = 0 then
 			foreach int i in 0 .. 5 do
 				bli[i] := (255 * bli[i]) >> 8;
 			end
 		else
 			 foreach int i in 0 .. 5 do
      			if dlt * dlti[i] >= 0 then
      				wd2 := 128;
      			else
      				wd2 := -128;
      			end
      			wd3 := (255 * bli[i]) >> 8;
      			bli[i] := wd2 + wd3;
      		end
      	end
      /* implement delay line for dlt */
	  dlti[5] := dlti[4];
	  dlti[4] := dlti[3];
	  dlti[3] := dlti[2];
	  dlti[1] := dlti[0];
	  dlti[0] := dlt;
 	end
 	
 	/* uppol2 - update second predictor coefficient (pole section) */
	/* inputs: al1, al2, plt, plt1, plt2. outputs: apl2 */
 	function uppol2 (int al1, int al2, int plt, int plt1, int plt2) --> int
 	var
 		int wd2 = (if (plt * plt1) >= 0 then -(4 * al1) else 4 * al1 end) >> 7,
 		int wd4 = if (plt * plt2) >= 0 then wd2 + 128 else wd2 - 128 end,
 		int apl2 = wd4 + (127 * al2 >>7) 
 	:
		if apl2 > 12288 then
			12288
		else 
			if	apl2 < -12288 then
				-12288
			else
				apl2
			end
		end
 	end
 	
 	/* uppol1 - update first predictor coefficient (pole section) */
	/* inputs: al1, apl2, plt, plt1. outputs: apl1 */
	function uppol1(int al1, int apl2, int plt, int plt1) --> int
	var
		int wd2 = (al1 * 255) >> 8,
		int apl1 = if plt * plt1 >= 0 then wd2 + 192 else wd2 - 192 end,
		int wd3 = 15360 - apl2
	:
		if apl1 > wd3 then
			wd3
		else
			if apl1 < -wd3 then
				-wd3
			else
				apl1
			end
		end
	end
	
	/* logsch - update log quantizer scale factor in higher sub-band */
	/* note that nbh is passed and returned */
	function logsch(int ih, int nbh) --> int
	var
		int wd = (nbh * 127) >> 7,
		int new_nbh = wd + wh_code_table[ih]
	:
		if new_nbh < 0 then
			0
		else
			if new_nbh > 22528 then
				22528
			else
				new_nbh
			end
		end
	end
		
	
end