/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package adpcm.encoder;

actor TestOutput()
	int In
		==>
			:
	int SIZE = 100;
	int test_compressed[SIZE] = [
				  253, 222, 119, 186, 244, 146, 32,  160, 236, 237, 238, 240, 241, 241, 242,
				  243, 244, 243, 244, 245, 244, 244, 245, 245, 245, 246, 246, 247, 247, 247,
				  247, 248, 246, 247, 249, 247, 248, 247, 248, 247, 248, 247, 248, 247, 248,
				  248, 246, 248, 247, 248, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
				  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
				  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
				  0,   0,   0,   0,   0,   0,   0,   0,   0,   0
				];
				
				
	int Counter := 0;
	
	
	action In:[token] ==>
	var
		int main_result := 0
	do
		if token != test_compressed[Counter] then
			println("Expected: " +test_compressed[Counter] + ", received: " + token + " : " + Counter );
			main_result := 1;
		else
			println("Correct value: " + token + " : " + Counter );
		end
		
		println("Main result :" + main_result);
		Counter := Counter + 1;
		if Counter = 100 then
			Counter := 0;
		end
	end	 			
			
end