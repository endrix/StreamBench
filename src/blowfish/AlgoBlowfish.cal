package blowfish;

import blowfish.Constants.*;

actor AlgoBlowfish() uint InData ==> uint OutData :
	uint key_P[BF_ROUNDS + 2];
	uint key_S[4 * 256];
	uint l;
	uint r;
	uint i;
	uint ri;
	uint in_i[2];
	uint ukey[8];
	uint ivec[8];
	uint c;
	uint num := 0;
	uint length_i;
	uint v0;
	uint v1;
	uint ti[2];
	uint t;
	uint indata;
	uint outdata;
	uint indata_i;
	uint outdata_i;
	uint temp;
	uint temp2;
	uint length_in := 1;
	uint encordec := 1;
	
	procedure BF_ENC_r(uint R, uint P) begin
		r := r ^ P;
		r := r ^ ((((key_S[R>>24] + key_S[0x0100+((R>>16)&0xff)]) ^ key_S[0x0200+((R>>8)&0xff)]) + key_S[0x0300+((R)&0xff)]) & 0xffffffff);
	end
	procedure BF_ENC_l(uint R, uint P) begin
		l := l ^ P;
		l := l ^ ((((key_S[R>>24] + key_S[0x0100+((R>>16)&0xff)]) ^ key_S[0x0200+((R>>8)&0xff)]) + key_S[0x0300+((R)&0xff)]) & 0xffffffff);
	end
	procedure BF_encrypt(uint data[2], uint encrypt) begin
		l := data[0];
		r := data[1];

		if encrypt = 1 then
      		l := l ^ key_P[0];

			  BF_ENC_r (l,key_P[1]);
			  BF_ENC_l (r,key_P[2]);
			  BF_ENC_r (l,key_P[3]);
			  BF_ENC_l (r,key_P[4]);
			  BF_ENC_r (l,key_P[5]);
			  BF_ENC_l (r,key_P[6]);
			  BF_ENC_r (l,key_P[7]);
			  BF_ENC_l (r,key_P[8]);
			  BF_ENC_r (l,key_P[9]);
			  BF_ENC_l (r,key_P[10]);
			  BF_ENC_r (l,key_P[11]);
			  BF_ENC_l (r,key_P[12]);
			  BF_ENC_r (l,key_P[13]);
			  BF_ENC_l (r,key_P[14]);
			  BF_ENC_r (l,key_P[15]);
			  BF_ENC_l (r,key_P[16]);
			  
			r := r ^ key_P[BF_ROUNDS + 1];
		else
			l := l ^ key_P[BF_ROUNDS + 1];
			
			  BF_ENC_r (l,key_P[16]);
			  BF_ENC_l (r,key_P[15]);
			  BF_ENC_r (l,key_P[14]);
			  BF_ENC_l (r,key_P[13]);
			  BF_ENC_r (l,key_P[12]);
			  BF_ENC_l (r,key_P[11]);
			  BF_ENC_r (l,key_P[10]);
			  BF_ENC_l (r,key_P[9]);
			  BF_ENC_r (l,key_P[8]);
			  BF_ENC_l (r,key_P[7]);
			  BF_ENC_r (l,key_P[6]);
			  BF_ENC_l (r,key_P[5]);
			  BF_ENC_r (l,key_P[4]);
			  BF_ENC_l (r,key_P[3]);
			  BF_ENC_r (l,key_P[2]);
			  BF_ENC_l (r,key_P[1]);
			  
			r := r ^ key_P[0];
		end
		data[1] := l & 0xffffffff;
		data[0] := r & 0xffffffff;
	end
	procedure BF_set_key(uint len, uint d) begin
		if len > (BF_ROUNDS + 2) * 4 then
			len := (BF_ROUNDS + 2) * 4;
		end
		
		i := 0;
		while i < 4 * 256 do
			key_S[i] := bf_init_S[i];
			i := i + 1;
		end
		
		i := 0;
		while i < BF_ROUNDS + 2 do
			ri := ukey[d];
			d := d + 1;
			if d >= len then
				d := 0;
			end

			ri := ri << 8;
			ri := ukey[d];
			d := d + 1;
			if d >= len then
				d := 0;
			end

			ri := ri << 8;
			ri := ukey[d];
			d := d + 1;
			if d >= len then
				d := 0;
			end
			
			ri := ri << 8;
			ri := ukey[d];
			d := d + 1;
			if d >= len then
				d := 0;
			end

			key_P[i] := bf_init_P[i] ^ ri;
			i := i + 1;
		end

		in_i[0] := 0;
		in_i[1] := 0;
		
		i := 0;
		while i < BF_ROUNDS + 2 do
			BF_encrypt (in_i, BF_ENCRYPT);
			key_P[i] := in_i[0];
			key_P[i + 1] := in_i[1];
			i := i + 2;
		end
		
		i := 0;
		while i < 4 * 256 do
			BF_encrypt (in_i, BF_ENCRYPT);
			key_S[i] := in_i[0];
			key_S[i + 1] := in_i[1];
			i := i + 2;
		end
	end
	function n2l() --> int : 
		 (ivec[c] << 24) | (ivec[c + 1] << 16) | (ivec[c + 2] << 8) | ivec[c + 3]
	end	
	procedure l2n(int l) begin
		ivec[c] := (l >> 24) & 0xff;
		ivec[c + 1] := (l >> 16) & 0xff;
		ivec[c + 2] := (l >> 8) & 0xff;
		ivec[c + 3] := l & 0xff;
		
		c := c + 4;
	end
	procedure BF_cfb64_encrypt(uint length, uint encrypt) begin
		indata_i := 0;
		outdata_i := 0;
		if encrypt = 1 then
			length_i := length;
			while  length_i > 0 do
				if num = 0 then
					c := 0;
					v0 := n2l();
					c := c + 4;
					ti[0] := v0;
					v1 := n2l();
					ti[1] := v1;
					BF_encrypt(ti, BF_ENCRYPT);
					c := 0;
					t := ti[0];
					l2n(t);
					t := ti[1];
					l2n(t);
					c := 0;
				end
				temp := indata ^ ivec[num];
				indata_i := indata_i + 1;
				outdata := temp;
				outdata_i := outdata_i + 1;
				ivec[num] := temp;
				num := (num + 1) & 0x7;

				length_i := length_i - 1;
			end
		else
			length_i := length;
			while length_i > 0 do
				if num = 0 then
					c := 0;
					v0 := n2l();
					c := c + 4;
					ti[0] := v0;
					v1 := n2l();
					ti[1] := v1;
					BF_encrypt(ti, BF_ENCRYPT);
					c := 0;
					t := ti[0];
					l2n(t);
					t := ti[1];
					l2n(t);
					c := 0;
				end
				temp2 := indata;
				indata_i := indata_i + 1;
				temp := ivec[num];
				ivec[num] := temp2;
				outdata := temp ^ temp2;
				outdata_i := outdata_i + 1;
				num := (num + 1) & 0x07;
				
				length_i := length_i - 1;
			end
		end
		v0 := 0;
		v1 := 0;
		ti[0] := 0; 
		ti[1] := 0;
		t := 0;
		temp := 0;
		temp2 := 0;
	end

	read_data: action InData:[ind] ==>
	do
		indata := ind;
	end
	
	write: action ==> OutData:[outdata] 
	end
	
	set_keys: action ==>
	var 
		int j
	do
		j := 0;
		while j < 8 do
			ukey[j] := 0;
			ivec[j] := 0;
			j := j + 1;
		end
			
		BF_set_key(8, 0);
	end
	
	process: action ==>
	do
			BF_cfb64_encrypt(length_in, encordec);
	end
	
	schedule fsm init:
		init (set_keys) --> input_data;
		input_data (read_data) --> busy;
		busy (process) --> output;
		output (write) --> input_data;
	end
end